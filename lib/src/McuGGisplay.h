/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : McuGGisplay.h
**     Project     : FRDM-K64F_Generator
**     Processor   : MK64FN1M0VLL12
**     Component   : GDisplay
**     Version     : Component 01.192, Driver 01.00, CPU db: 3.00.000
**     Repository  : Legacy User Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2016-12-17, 17:32, # CodeGen: 110
**     Abstract    :
**
**     Settings    :
**          Component name                                 : McuGGisplay
**          Inverted Pixels                                : no
**          Memory Buffer                                  : Enabled
**            Orientation                                  : Landscape
**          Clear screen on Init                           : no
**          Hardware                                       : 
**            Display                                      : McuSharpMemoryDisplay
**          Watchdog                                       : Disabled
**          RTOS                                           : Disabled
**     Contents    :
**         PutPixel          - void McuGGisplay_PutPixel(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y,...
**         SetPixel          - void McuGGisplay_SetPixel(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y);
**         ClrPixel          - void McuGGisplay_ClrPixel(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y);
**         Clear             - void McuGGisplay_Clear(void);
**         DrawBox           - void McuGGisplay_DrawBox(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y,...
**         DrawFilledBox     - void McuGGisplay_DrawFilledBox(McuGGisplay_PixelDim x, McuGGisplay_PixelDim...
**         DrawHLine         - void McuGGisplay_DrawHLine(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y,...
**         DrawVLine         - void McuGGisplay_DrawVLine(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y,...
**         DrawLine          - void McuGGisplay_DrawLine(McuGGisplay_PixelDim xstart, McuGGisplay_PixelDim...
**         DrawCircle        - void McuGGisplay_DrawCircle(McuGGisplay_PixelDim x0, McuGGisplay_PixelDim y0,...
**         DrawFilledCircle  - void McuGGisplay_DrawFilledCircle(McuGGisplay_PixelDim x0,...
**         DrawBarChart      - void McuGGisplay_DrawBarChart(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y,...
**         DrawMonoBitmap    - void McuGGisplay_DrawMonoBitmap(McuGGisplay_PixelDim x, McuGGisplay_PixelDim...
**         DrawColorBitmap   - void McuGGisplay_DrawColorBitmap(McuGGisplay_PixelDim x, McuGGisplay_PixelDim...
**         Draw65kBitmap     - void McuGGisplay_Draw65kBitmap(McuGGisplay_PixelDim x1, McuGGisplay_PixelDim...
**         Draw256BitmapLow  - void McuGGisplay_Draw256BitmapLow(McuGGisplay_PixelDim x1,...
**         Draw256BitmapHigh - void McuGGisplay_Draw256BitmapHigh(McuGGisplay_PixelDim x1,...
**         UpdateFull        - void McuGGisplay_UpdateFull(void);
**         UpdateRegion      - void McuGGisplay_UpdateRegion(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y,...
**         GetWidth          - McuGGisplay_PixelDim McuGGisplay_GetWidth(void);
**         GetHeight         - McuGGisplay_PixelDim McuGGisplay_GetHeight(void);
**         GetLongerSide     - McuGGisplay_PixelDim McuGGisplay_GetLongerSide(void);
**         GetShorterSide    - McuGGisplay_PixelDim McuGGisplay_GetShorterSide(void);
**         GetDisplay        - void McuGGisplay_GetDisplay(void);
**         GiveDisplay       - void McuGGisplay_GiveDisplay(void);
**         Init              - void McuGGisplay_Init(void);
**
**     * Copyright (c) 2013-2016, Erich Styger
**      * Web:         https://mcuoneclipse.com
**      * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**      * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**      * All rights reserved.
**      *
**      * Redistribution and use in source and binary forms, with or without modification,
**      * are permitted provided that the following conditions are met:
**      *
**      * - Redistributions of source code must retain the above copyright notice, this list
**      *   of conditions and the following disclaimer.
**      *
**      * - Redistributions in binary form must reproduce the above copyright notice, this
**      *   list of conditions and the following disclaimer in the documentation and/or
**      *   other materials provided with the distribution.
**      *
**      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**      * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**      * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**      * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**      * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**      * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file McuGGisplay.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup McuGGisplay_module McuGGisplay module documentation
**  @{
*/         


#ifndef __McuGGisplay_H
#define __McuGGisplay_H

/* MODULE McuGGisplay. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "McuSharpMemoryDisplay.h"

#include "Cpu.h"


/* this type is declared in PE_Types.h for non-LDD processors, need to declare it locally otherwise */
typedef struct {                       /* Image */
  word width;                          /* Image width  */
  word height;                         /* Image height */
  const byte * pixmap;                 /* Image pixel bitmap */
  word size;                           /* Image size   */
  const char_t * name;                 /* Image name   */
} TIMAGE;
typedef TIMAGE* PIMAGE ;               /* Pointer to image */

#define McuGGisplay_RGB565(R,G,B)     ((McuGGisplay_PixelColor)((((R)&0x1f)<<11)+(((G)&0x3f)<<5)+((B)&0x1f))) /* convert RGB into 565 color format */

#define McuGGisplay_COLOR_PIXEL_SET          McuSharpMemoryDisplay_COLOR_PIXEL_SET       /* value for a pixel set */
#define McuGGisplay_COLOR_PIXEL_CLR          McuSharpMemoryDisplay_COLOR_PIXEL_CLR       /* value for a pixel cleared */
#define McuGGisplay_COLOR_BLACK              McuSharpMemoryDisplay_COLOR_BLACK           /* black color */
#define McuGGisplay_COLOR_WHITE              McuSharpMemoryDisplay_COLOR_WHITE           /* white color */
#define McuGGisplay_COLOR_RED                McuSharpMemoryDisplay_COLOR_RED             /* red color */
#define McuGGisplay_COLOR_BRIGHT_RED         McuSharpMemoryDisplay_COLOR_BRIGHT_RED      /* bright red color */
#define McuGGisplay_COLOR_DARK_RED           McuSharpMemoryDisplay_COLOR_DARK_RED        /* dark red color */
#define McuGGisplay_COLOR_GREEN              McuSharpMemoryDisplay_COLOR_GREEN           /* green color */
#define McuGGisplay_COLOR_DARK_GREEN         McuSharpMemoryDisplay_COLOR_DARK_GREEN      /* dark green color */
#define McuGGisplay_COLOR_BRIGHT_GREEN       McuSharpMemoryDisplay_COLOR_BRIGHT_GREEN    /* bright green color */
#define McuGGisplay_COLOR_BLUE               McuSharpMemoryDisplay_COLOR_BLUE            /* blue color */
#define McuGGisplay_COLOR_BRIGHT_BLUE        McuSharpMemoryDisplay_COLOR_BRIGHT_BLUE     /* bright blue color */
#define McuGGisplay_COLOR_DARK_BLUE          McuSharpMemoryDisplay_COLOR_DARK_BLUE       /* dark blue color */
#define McuGGisplay_COLOR_YELLOW             McuSharpMemoryDisplay_COLOR_YELLOW          /* yellow color */
#define McuGGisplay_COLOR_BRIGHT_YELLOW      McuSharpMemoryDisplay_COLOR_BRIGHT_YELLOW   /* bright yellow color */
#define McuGGisplay_COLOR_ORANGE             McuSharpMemoryDisplay_COLOR_ORANGE          /* orange color */
#define McuGGisplay_COLOR_GREY               McuSharpMemoryDisplay_COLOR_GREY            /* grey color */
#define McuGGisplay_COLOR_BRIGHT_GREY        McuSharpMemoryDisplay_COLOR_BRIGHT_GREY     /* bright grey color */

typedef McuSharpMemoryDisplay_PixelDim   McuGGisplay_PixelDim; /* Display specific type for a pixel coordinate. */
typedef McuSharpMemoryDisplay_PixelColor McuGGisplay_PixelColor; /* Display specific color type. */
typedef McuSharpMemoryDisplay_PixelCount McuGGisplay_PixelCount; /* Type able to hold the number of pixels for the display. */

/* wrappers for the low level display orientation enumeration and type */
typedef McuSharpMemoryDisplay_DisplayOrientation McuGGisplay_DisplayOrientation;
#define McuGGisplay_ORIENTATION_PORTRAIT     McuSharpMemoryDisplay_ORIENTATION_PORTRAIT
#define McuGGisplay_ORIENTATION_PORTRAIT180  McuSharpMemoryDisplay_ORIENTATION_PORTRAIT180
#define McuGGisplay_ORIENTATION_LANDSCAPE    McuSharpMemoryDisplay_ORIENTATION_LANDSCAPE
#define McuGGisplay_ORIENTATION_LANDSCAPE180 McuSharpMemoryDisplay_ORIENTATION_LANDSCAPE180


/* Landscape */

#define McuGGisplay_BUF_BYTE(x,y)  /* how to access a byte in the display buf[][] */ \
      McuSharpMemoryDisplay_DisplayBuf[y][(x)/8]

#define McuGGisplay_BUF_BYTE_PIXEL_BIT_NO(x,y) /* pixel bit number inside display buffer byte (0 is LSB, 7 MSB) */ \
      ((byte)(7-((x)%8)))

#define McuGGisplay_BUF_BYTE_PIXEL_MASK(x,y)  /* pixel mask for an individual bit inside a display buffer byte */ \
  (1<<McuGGisplay_BUF_BYTE_PIXEL_BIT_NO(x,y))

#define McuGGisplay_BUF_BYTE_GET_PIXEL(x,y)  /* extract a pixel */ \
  ((McuGGisplay_BUF_BYTE(x,y)&McuGGisplay_BUF_BYTE_PIXEL_MASK(x,y))>>McuGGisplay_BUF_BYTE_PIXEL_BIT_NO(x,y))

void McuGGisplay_Clear(void);
/*
** ===================================================================
**     Method      :  McuGGisplay_Clear (component GDisplay)
**     Description :
**         Clears the display buffer.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_SetPixel(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y);
/*
** ===================================================================
**     Method      :  McuGGisplay_SetPixel (component GDisplay)
**     Description :
**         Sets a pixel in the display buffer
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - Pixel x position
**         y               - Pixel y position
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_ClrPixel(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y);
/*
** ===================================================================
**     Method      :  McuGGisplay_ClrPixel (component GDisplay)
**     Description :
**         Clears a single pixel in the display.
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - Pixel x position.
**         y               - Pixel y position.
**     Returns     : Nothing
** ===================================================================
*/

#define McuGGisplay_UpdateFull()   McuSharpMemoryDisplay_UpdateFull()
/*
** ===================================================================
**     Method      :  McuGGisplay_UpdateFull (component GDisplay)
**     Description :
**         Updates the image on the display. This is needed in case the
**         display requires a periodic refresh. For display using
**         windowing, this function may be implemented as dummy stub,
**         as the display content already is written.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawFilledBox(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, McuGGisplay_PixelDim width, McuGGisplay_PixelDim height, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawFilledBox (component GDisplay)
**     Description :
**         Draws a rectangle box (filled)
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x left upper coordinate
**         y               - y left upper coordinate
**         width           - Width in pixels
**         height          - Height in pixels
**         color           - color to be used to fill the box.
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_PutPixel(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_PutPixel (component GDisplay)
**     Description :
**         
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x coordinate
**         y               - y coordinate
**         color           - color to be used for the pixel
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawBox(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, McuGGisplay_PixelDim width, McuGGisplay_PixelDim height, McuGGisplay_PixelDim lineWidth, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawBox (component GDisplay)
**     Description :
**         Draws a rectangle line box
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x left upper coordinate
**         y               - y left upper coordinate
**         width           - width in pixels
**         height          - height in pixels
**         lineWidth       - width of the line
**         color           - color for the box
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawMonoBitmap(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, PIMAGE image, McuGGisplay_PixelColor pixelColor, McuGGisplay_PixelColor backgroundColor);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawMonoBitmap (component GDisplay)
**     Description :
**         Draws a B/W bitmap.
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x position of left upper corner
**         y               - y position of left upper corner
**         image           - Pointer to image structure and
**                           information.
**         pixelColor      - Color to be used for pixels
**                           (pixel set)
**         backgroundColor - Color to be used
**                           for background (pixel not set)
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawHLine(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, McuGGisplay_PixelDim length, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawHLine (component GDisplay)
**     Description :
**         Draws a horizontal line
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x left upper coordinate
**         y               - y left upper coordinate
**         length          - Length of line in pixels
**         color           - color to be used to fill the box.
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawVLine(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, McuGGisplay_PixelDim length, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawVLine (component GDisplay)
**     Description :
**         Draws a vertical line
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x left upper coordinate
**         y               - y left upper coordinate
**         length          - Length of line in pixels
**         color           - color to be used to fill the box.
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawBarChart(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, McuGGisplay_PixelDim width, McuGGisplay_PixelDim height, byte *data, byte nofData, McuGGisplay_PixelColor barColor, byte borderWidth, McuGGisplay_PixelColor borderColor, byte borderSpace);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawBarChart (component GDisplay)
**     Description :
**         Draws a series of bars for a chart
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - upper left corner x coordinate
**         y               - upper left corner y coordinate
**         width           - Chart box width
**         height          - Chart box height
**       * data            - Pointer to data (series of % values
**                           from 0...100%)
**         nofData         - number of data bytes
**         barColor        - Color to be used for the bars.
**         borderWidth     - width of a border to be
**                           draw. Pass zero if there shall be no border.
**         borderColor     - Color to be used for the
**                           border (if borderWidth is not zero)
**         borderSpace     - Space to be used in pixels
**                           between border and bars.
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawColorBitmap(McuGGisplay_PixelDim x, McuGGisplay_PixelDim y, PIMAGE image);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawColorBitmap (component GDisplay)
**     Description :
**         Draws a color bitmap. Pixel data is in 3-3-2 RGB format.
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x position of left upper corner
**         y               - y position of left upper corner
**         image           - Pointer to image structure and
**                           information.
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawLine(McuGGisplay_PixelDim xstart, McuGGisplay_PixelDim ystart, McuGGisplay_PixelDim xend, McuGGisplay_PixelDim yend, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawLine (component GDisplay)
**     Description :
**         Draws a line using the Bresenham method
**     Parameters  :
**         NAME            - DESCRIPTION
**         xstart          - x start coordinate
**         ystart          - y start coordinate
**         xend            - x end coordinate
**         yend            - y end coordinate
**         color           - color to be used for the line
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawCircle(McuGGisplay_PixelDim x0, McuGGisplay_PixelDim y0, McuGGisplay_PixelDim radius, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawCircle (component GDisplay)
**     Description :
**         Draws a circle using the Bresenham method
**     Parameters  :
**         NAME            - DESCRIPTION
**         x0              - x start coordinate
**         y0              - y start coordinate
**         radius          - Radius of the circle
**         color           - color to be used for the line
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_Draw65kBitmap(McuGGisplay_PixelDim x1, McuGGisplay_PixelDim y1, McuGGisplay_PixelDim x2, McuGGisplay_PixelDim y2, word *bmp, bool compressed);
/*
** ===================================================================
**     Method      :  McuGGisplay_Draw65kBitmap (component GDisplay)
**     Description :
**         Draws a 65k color bitmap (compressed or uncompressed)
**     Parameters  :
**         NAME            - DESCRIPTION
**         x1              - left upper starting corner
**         y1              - left upper starting corner
**         x2              - right lower corner
**         y2              - right lower corner
**       * bmp             - Pointer to bitmap
**         compressed      - 
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_Draw256BitmapLow(McuGGisplay_PixelDim x1, McuGGisplay_PixelDim y1, McuGGisplay_PixelDim x2, McuGGisplay_PixelDim y2, byte *bmp, bool compressed);
/*
** ===================================================================
**     Method      :  McuGGisplay_Draw256BitmapLow (component GDisplay)
**     Description :
**         Draws a 256 color bitmap (compressed or uncompressed)
**     Parameters  :
**         NAME            - DESCRIPTION
**         x1              - left upper starting corner
**         y1              - left upper starting corner
**         x2              - right lower corner
**         y2              - right lower corner
**       * bmp             - Pointer to bitmap
**         compressed      - 
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_Draw256BitmapHigh(McuGGisplay_PixelDim x1, McuGGisplay_PixelDim y1, McuGGisplay_PixelDim x2, McuGGisplay_PixelDim y2, byte *bmp, McuGGisplay_PixelColor *ColorTable, bool compressed);
/*
** ===================================================================
**     Method      :  McuGGisplay_Draw256BitmapHigh (component GDisplay)
**     Description :
**         Draws a 256 color bitmap (compressed or uncompressed) with a
**         color table.
**     Parameters  :
**         NAME            - DESCRIPTION
**         x1              - left upper starting corner
**         y1              - left upper starting corner
**         x2              - right lower corner
**         y2              - right lower corner
**       * bmp             - Pointer to bitmap
**       * ColorTable      - Pointer to array of colors
**                           (color table)
**         compressed      - 
**     Returns     : Nothing
** ===================================================================
*/

#define McuGGisplay_UpdateRegion(x,y,w,h)   McuSharpMemoryDisplay_UpdateRegion(x,y,w,h)

/*
** ===================================================================
**     Method      :  McuGGisplay_UpdateRegion (component GDisplay)
**     Description :
**         Update a region of the display.
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x coordinate
**         y               - y coordinate
**         w               - Width of the update region
**         h               - height of the update region
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_DrawFilledCircle(McuGGisplay_PixelDim x0, McuGGisplay_PixelDim y0, McuGGisplay_PixelDim radius, McuGGisplay_PixelColor color);
/*
** ===================================================================
**     Method      :  McuGGisplay_DrawFilledCircle (component GDisplay)
**     Description :
**         Draws a circle using the Bresenham method
**     Parameters  :
**         NAME            - DESCRIPTION
**         x0              - x start coordinate
**         y0              - y start coordinate
**         radius          - Radius of the circle
**         color           - fill color to be used
**     Returns     : Nothing
** ===================================================================
*/

#define McuGGisplay_GetWidth McuSharpMemoryDisplay_GetLongerSide
/*
** ===================================================================
**     Method      :  McuGGisplay_GetWidth (component GDisplay)
**     Description :
**         Returns the width of the display in pixels (in x direction)
**     Parameters  : None
**     Returns     :
**         ---             - pixel count
** ===================================================================
*/

#define McuGGisplay_GetHeight McuSharpMemoryDisplay_GetShorterSide
/*
** ===================================================================
**     Method      :  McuGGisplay_GetHeight (component GDisplay)
**     Description :
**         Returns the height of the display in pixels (in y direction)
**     Parameters  : None
**     Returns     :
**         ---             - pixel count
** ===================================================================
*/

#define McuGGisplay_GetLongerSide McuSharpMemoryDisplay_GetLongerSide
/*
** ===================================================================
**     Method      :  McuGGisplay_GetLongerSide (component GDisplay)
**     Description :
**         Returns the size of the longer side of the display
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

#define McuGGisplay_GetShorterSide McuSharpMemoryDisplay_GetShorterSide
/*
** ===================================================================
**     Method      :  McuGGisplay_GetShorterSide (component GDisplay)
**     Description :
**         Returns the size of the shorter side of the display
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void McuGGisplay_GetDisplay(void);
/*
** ===================================================================
**     Method      :  McuGGisplay_GetDisplay (component GDisplay)
**     Description :
**         Method used to reserve the display (for mutual exclusive
**         access)
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_GiveDisplay(void);
/*
** ===================================================================
**     Method      :  McuGGisplay_GiveDisplay (component GDisplay)
**     Description :
**         Returns the display after having it reserved with
**         GetDisplay()
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuGGisplay_Init(void);
/*
** ===================================================================
**     Method      :  McuGGisplay_Init (component GDisplay)
**     Description :
**         
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END McuGGisplay. */

#endif
/* ifndef __McuGGisplay_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
