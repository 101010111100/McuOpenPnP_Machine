/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : McuBitIO.h
**     Project     : FRDM-K64F_Generator
**     Processor   : MK64FN1M0VLL12
**     Component   : GenericBitIO
**     Version     : Component 01.076, Driver 01.00, CPU db: 3.00.000
**     Repository  : Legacy User Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2016-12-12, 14:16, # CodeGen: 98
**     Abstract    :
**
**     Settings    :
**          Component name                                 : McuBitIO
**          Direction                                      : Input/Output
**          SDK                                            : McuLib
**          SDK                                            : Disabled
**          Data                                           : Enabled
**            Declaration                                  : By Bit Name
**            By Bit Name                                  : Enabled
**              Name                                       : PTAD_PTAD0
**            By Port Name                                 : Disabled
**            By Set/Clear Port Name                       : Disabled
**            By Address                                   : Disabled
**            By LDD                                       : Disabled
**          Direction                                      : Enabled
**            Declaration                                  : By Bit Name
**            1 means output                               : yes
**            By Bit Name                                  : Enabled
**              Name                                       : PTADD_PTADD0
**            By Port Name                                 : Disabled
**            By Address                                   : Disabled
**          Initialization                                 : 
**            Value                                        : 0
**            Direction                                    : output
**     Contents    :
**         GetDir    - bool McuBitIO_GetDir(void);
**         SetDir    - void McuBitIO_SetDir(bool Dir);
**         SetInput  - void McuBitIO_SetInput(void);
**         SetOutput - void McuBitIO_SetOutput(void);
**         GetVal    - bool McuBitIO_GetVal(void);
**         PutVal    - void McuBitIO_PutVal(bool Val);
**         ClrVal    - void McuBitIO_ClrVal(void);
**         SetVal    - void McuBitIO_SetVal(void);
**         NegVal    - void McuBitIO_NegVal(void);
**         Init      - void McuBitIO_Init(void);
**         Deinit    - void McuBitIO_Deinit(void);
**
**     * Copyright (c) 2011-2016, Erich Styger
**      * Web:         https://mcuoneclipse.com
**      * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**      * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**      * All rights reserved.
**      *
**      * Redistribution and use in source and binary forms, with or without modification,
**      * are permitted provided that the following conditions are met:
**      *
**      * - Redistributions of source code must retain the above copyright notice, this list
**      *   of conditions and the following disclaimer.
**      *
**      * - Redistributions in binary form must reproduce the above copyright notice, this
**      *   list of conditions and the following disclaimer in the documentation and/or
**      *   other materials provided with the distribution.
**      *
**      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**      * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**      * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**      * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**      * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**      * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file McuBitIO.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup McuBitIO_module McuBitIO module documentation
**  @{
*/         

#ifndef __McuBitIO_H
#define __McuBitIO_H

/* MODULE McuBitIO. */
#include "McuLib.h" /* SDK and API used */
#include "McuBitIOconfig.h" /* configuration */

/* Include inherited components */
#include "McuLib.h"



#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_GetDir() \
  (PTADD_PTADD0)
#else
  bool McuBitIO_GetDir(void);
#endif

/*
** ===================================================================
**     Method      :  McuBitIO_GetDir (component GenericBitIO)
**     Description :
**         Return the direction of the pin (input/output)
**     Parameters  : None
**     Returns     :
**         ---             - FALSE if port is input, TRUE if port is
**                           output
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_SetDir(Dir) \
  ((Dir)==0?McuBitIO_SetInput():McuBitIO_SetOutput())
#else
  void McuBitIO_SetDir(bool Dir);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_SetDir (component GenericBitIO)
**     Description :
**         Sets the direction of the pin (input or output)
**     Parameters  :
**         NAME            - DESCRIPTION
**         Dir             - FALSE: input, TRUE: output
**     Returns     : Nothing
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_SetInput() \
  (PTADD_PTADD0 = 0)
#else
  void McuBitIO_SetInput(void);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_SetInput (component GenericBitIO)
**     Description :
**         Sets the pin as input.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_SetOutput() \
  (PTADD_PTADD0 = 1)
#else
  void McuBitIO_SetOutput();
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_SetOutput (component GenericBitIO)
**     Description :
**         Sets the pin as output
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_GetVal() \
  PTAD_PTAD0
#else
  bool McuBitIO_GetVal(void);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_GetVal (component GenericBitIO)
**     Description :
**         Returns the pin value
**     Parameters  : None
**     Returns     :
**         ---             - Returns the value of the pin:
**                           FALSE/logical level '0' or TRUE/logical
**                           level '1'
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_PutVal(Val) \
  (((Val)!=0)?McuBitIO_SetVal():McuBitIO_ClrVal())
#else
  void McuBitIO_PutVal(bool Val);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_PutVal (component GenericBitIO)
**     Description :
**         Sets the pin value
**     Parameters  :
**         NAME            - DESCRIPTION
**         Val             - Value to set. FALSE/logical '0' or
**                           TRUE/logical '1'
**     Returns     : Nothing
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_ClrVal() \
  (PTAD_PTAD0 = 0)
#else
  void McuBitIO_ClrVal(void);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_ClrVal (component GenericBitIO)
**     Description :
**         Clears the pin value (sets it to a low level)
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_SetVal() \
  (PTAD_PTAD0 = 1)
#else
  void McuBitIO_SetVal(void);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_SetVal (component GenericBitIO)
**     Description :
**         Sets the pin value to a high value.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#if McuLib_CONFIG_SDK_VERSION_USED == McuLib_CONFIG_SDK_PROCESSOR_EXPERT
  #define McuBitIO_NegVal() \
  (PTAD_PTAD0 ^= 1)
#else
  void McuBitIO_NegVal(void);
#endif
/*
** ===================================================================
**     Method      :  McuBitIO_NegVal (component GenericBitIO)
**     Description :
**         Toggles/negates the pin value
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuBitIO_Init(void);
/*
** ===================================================================
**     Method      :  McuBitIO_Init (component GenericBitIO)
**     Description :
**         Initializes the driver
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void McuBitIO_Deinit(void);
/*
** ===================================================================
**     Method      :  McuBitIO_Deinit (component GenericBitIO)
**     Description :
**         De-Initializes the driver
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END McuBitIO. */

#endif
/* ifndef __McuBitIO_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
